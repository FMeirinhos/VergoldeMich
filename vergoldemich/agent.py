import numpy as np

from .base import MetaBase

from .strategies.signal import *
from .strategies.stop_loss import StopLoss

from catalyst.api import (
    get_open_orders,
    symbol,
    record,
    order,
    order_percent,
    order_target,
    order_target_percent,
    order_target_value,
    order_value
)


class Agent(MetaBase):
    """
    Agent for a crypto asset. The agent manages everything associated with
    the market, such as activating stop losses, trading and changing
    strategies.

    Attributes
            market (str) The currency market
            strategy (Strategy) The to-be-used strategy
    """

    params = dict(
    )

    def __init__(self, market, strategy):
        super(Agent, self).__init__()

        self.logger.info("Initialized agent with {}".format(
            strategy.__class__.__name__))

        self.market = symbol(market)
        self.strategy = strategy
        self.stop_loss = StopLoss()

    def __repr__(self):
        return 'Agent ' + self.market.symbol + ' with ' + str(self.strategy.__class__.__name__)

    def trade(self, context, data):
        """
        This is the brain of the agent and it is what carries out trades
        """

        # Get current price
        price = data.current(self.market, 'price')

        # Check if price is ok
        if price is np.nan:
            self.logger.warn('No pricing data')
            return

        record(
            price=price
        )

        # Activate possible stop losses
        if self.order(self.stop_loss, context, data):
            return

        # Check current orders for this market
        # if len(get_open_orders(self.market)) > 0:
        #     self.logger.info('Skipping frame until all open orders execute')
        #     return

        # if not data.can_trade(self.market):
        #     self.logger.warn("Can't trade!")
        #     return

        # Call strategy
        self.order(self.strategy, context, data)

    def order(self, strategy, context, data):
        """
        Places the order(s) generated by the trading algorithm
        """

        signal, arg = strategy.signal(self.market, context, data)

        if signal == SIGNAL_NONE:
            return False

        pos = context.portfolio.positions[self.market]
        price = data.current(self.market, 'price')

        if signal == SIGNAL_LONG:
            if pos.amount == 0:
                self.logger.info(
                    '{0}: LONGING - price: {1:.4f}\t {2}'.format(data.current_dt, price, arg))
                order_target_percent(self.market, target=1)

        elif signal == SIGNAL_SHORT:
            if pos.amount > 0:
                self.logger.info(
                    '{0}: SHRTING - price: {1:.4f}\t {2}'.format(data.current_dt, price, arg))
                order_target_percent(self.market, target=0)

                context.short_positions[self.market.symbol] = price

        else:
            raise NotImplementedError

        return True
